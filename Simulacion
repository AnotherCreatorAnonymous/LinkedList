class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None
        self.prev = None

    def getValue(self):
        return self.value

    def setValue(self, new_value):
        self.value = new_value

    def getNext(self):
        return self.next

    def setNext(self, new_next):
        if isinstance(new_next, Node) or new_next is None:
            self.next = new_next
        else:
            raise Exception("New Next must be a Node or None")

    def getPrev(self):
        return self.prev

    def setPrev(self, prev_node):
        if isinstance(prev_node, Node) or prev_node is None:
            self.prev = prev_node
        else:
            raise Exception("New Prev must be a Node or None")

    def clear(self):
        self.value = None
        self.next = None
        self.prev = None  # Añadir esto para eliminar también la referencia a prev

    def __str__(self):
        next_str = "x" if self.next is None else str(self.next.value)
        prev_str = "x" if self.prev is None else str(self.prev.value)
        return f"Node({self.value}) <-- {prev_str} | --> {next_str}"


class LinkedList:
    def __init__(self, data = []):
        self.head, self.tail, self.len = None, None, 0
        for e in data:
            self.append(e)
    def __len__(self):
        return self.len
    def append(self, value):
        new_node = Node(value)
        if len(self) == 0:
            self.head = self.tail = new_node
        else:
            current_tail = self.tail
            current_tail.setNext(new_node)
            new_node.setPrev(current_tail)
            self.setTail(new_node)
        self.len += 1
    def search(self, value):
        current = self.head
        while current is not None and current.getValue() != value:
            current = current.getNext()
        return current
    def getHead(self):
        return self.head
    def getTail(self):
        return self.tail
    def setTail(self, new_tail):
        if new_tail is not None:
            new_tail.setNext(None)
            self.tail = new_tail
        else:
            self.tail = None
    def update(self, old_value, new_value):
        node_origin = self.search(old_value)
        node_origin.setValue(new_value)
        
    def slice(self, value, n=1):
        ld = LinkedList()
        node_origin = self.search(value)
        if node_origin is not None:
            current, index = node_origin, 0
            while current is not None and index < n:
                ld.append(current.getValue())
                current = current.getNext()
                index += 1
        return ld
        
    def isEmpty(self):
        return len(self) == 0
    def merge(self, list_b):
        if self.isEmpty():
            return list_b
        if list_b.isEmpty():
            return self
        self.tail.setNext(list_b.getHead())
        list_b.getHead().setPrev(self.tail)     
        self.setTail(list_b.getTail())
    def delete(self, value):
        value_node = self.search(value)
        if value_node is not None:
            # Caso 1: Nodo único
            if value_node == self.head and self.tail == value_node:
                self.head = self.tail = None
            # Caso 2: Nodo es la cabeza
            elif value_node == self.head:
                self.head = value_node.getNext()
                if self.head is not None:
                    self.head.setPrev(None)
            # Caso 3: Nodo es la cola
            elif value_node == self.tail:
                self.tail = value_node.getPrev()
                self.tail.setNext(None)
            # Caso 4: Nodo en el medio
            else:
                prev_node = value_node.getPrev()
                next_node = value_node.getNext()
                prev_node.setNext(next_node)
                next_node.setPrev(prev_node)
            self.len -= 1
        else:
            raise Exception("Element not found.")
        
    def __str__(self):
        nodes = []
        current = self.head
        while current is not None:
            nodes.append(str(current.getValue()))
            current = current.getNext()
        return " <-> ".join(nodes)
class Queue:
    def __init__(self):
        self.data = []
    def enqueue(self, e):
        self.data.append(e) #Punto de referencia cómo el inicio
    def dequeue(self): #como punto de referencia el inicio
        element = self.data[0]
        self.data.pop(0)
        return element
    def __str__(self):
        return "Queue("+str(self.data[0])+")"
    def __len__(self):
        return len(self.data)
#Implementación LIFO
class Stack:
    def __init__(self):
        self.data = []
    def push(self, e):
        #self.data.append(e) #Punto de referencia cómo el final
        self.data.insert(0,e) #Punto de referencia cómo el inicio
    def pop(self):
        element = self.data[0]
        self.data.pop(0)
        return element
        #self.data.pop(0) Punto de referencia es el inicio
    def __str__(self):
        return "Stack("+str(self.data[0])+")"
    def __len__(self):
        return len(self.data)

def main():
    fila_banco = Queue()
    
    # Encolar algunas personas
    fila_banco.enqueue("Persona1")
    fila_banco.enqueue("Persona2")
    fila_banco.enqueue("Persona3")
    
    print("Fila inicial del banco:", fila_banco)
    
    # Atender a la primera persona en la fila
    atendido = fila_banco.dequeue()
    print("Atendiendo a:", atendido)
    print("Fila después de atender a la primera persona:", fila_banco)
    
    # Encolar más personas
    fila_banco.enqueue("Persona4")
    fila_banco.enqueue("Persona5")
    
    print("Fila final del banco:", fila_banco)
    

main()
